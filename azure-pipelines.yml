name: ASPDOTNET.$(BuildId)
trigger:
  branches:
     include:
       - main
pool:
 vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              projects: 'AspNetCoreTests/AspNetCoreTests.Web/AspNetCoreTests.Web.csproj'
              feedsToUse: 'select'
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'test'
              projects: 'AspNetCoreTests/AspNetCoreTests.UnitTests/AspNetCoreTests.UnitTests.csproj'
              arguments: '--logger trx'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install --global dotnet-ef'
          # - task: DotNetCoreCLI@2
          #   inputs:
          #     command: 'custom'
          #     custom: 'ef'
          #     arguments: 'database update --project=AspNetCoreTests/AspNetCoreTests.Web/'
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '17.09.0-ce'
          - task: Docker@2
            inputs:
              containerRegistry: 'aspdotnet'
              repository: 'aspdotnet2023'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: $(Build.BuildId)
            
  - stage: Deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    dependsOn: Build
    jobs:
      - deployment: dev
        displayName: Dev-Deploy
        workspace:
          clean: all
        pool:
         vmImage: 'ubuntu-latest'
        # environment:
        #  name: devdeploy
        # variables:
        #   - template: devdeploy.yml
        strategy:
         runOnce:
           deploy:
             steps:
               - 
        
        



          # - task: DotNetCoreCLI@2
          #   displayName: Build
          #   inputs:
          #     command: 'build'
          #     projects: 'AspNetCoreTests/AspNetCoreTests.UnitTests/AspNetCoreTests.UnitTests.csproj'
          #     arguments: '--configuration $(BuildConfiguration)'
          # - task: DotNetCoreCLI@2
          #   displayName: Publish
          #   inputs:
          #     command: 'publish'
          #     publishWebProjects: true
          #     arguments: '--output $(build.artifactstagingdirectory)'
          # - task: PublishBuildArtifacts@1
          #   displayName: PublishBuildArtifacts
          #   inputs:
          #     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          #     ArtifactName: 'drop'
          #     publishLocation: 'Container'

  # - stage: Deploy
  #   jobs:
  #     - job: deploy
  #       pool:
  #        vmImage: 'ubuntu-latest'
  #       steps:
  #         - task: DownloadBuildArtifacts@1
  #           displayName: DownloadBuildArtifacts
  #           inputs:
  #             buildType: 'current'
  #             downloadType: 'single'
  #             artifactName: 'drop'
  #             downloadPath: '$(System.ArtifactsDirectory)'
          # - task: AzureRmWebAppDeployment@4
          #   displayName: Webapp Deploy
          #   inputs:
          #     ConnectionType: 'AzureRM'
          #     azureSubscription: 'Azure subscription 1(1)(62d23974-1452-401f-ae2f-b88e5377196d)'
          #     appType: 'webAppLinux'
          #     WebAppName: 'giggio'
          #     packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'