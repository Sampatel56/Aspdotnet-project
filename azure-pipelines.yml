name: ASPDOTNET.$(BuildId)
trigger:
  branches:
     include:
       - master
pool:
 vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DotNetCoreCLI@2
            inputs:
              command: 'restore'
              projects: 'AspNetCoreTests/AspNetCoreTests.Web/AspNetCoreTests.Web.csproj'
              feedsToUse: 'select'
              
          - task: DotNetCoreCLI@2
            inputs:
              command: 'test'
              projects: 'AspNetCoreTests/AspNetCoreTests.UnitTests/AspNetCoreTests.UnitTests.csproj'
              arguments: '--logger trx'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install --global dotnet-ef'
          - task: DotNetCoreCLI@2
            inputs:
              command: 'custom'
              custom: 'ef'
              arguments: 'migrations script --output $(Build.SourcesDirectory)/SQL/tododbscript.sql --no-build --context DemoDbContext --project AspNetCoreTests/AspNetCoreTests.Web/AspNetCoreTests.Web.csproj -s AspNetCoreTests/AspNetCoreTests.Web'
              workingDirectory: '$(Build.SourcesDirectory)'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/SQL'
              ArtifactName: 'drop'
              publishLocation: 'Container'
          - task: DockerInstaller@0
            inputs:
              dockerVersion: '17.09.0-ce'
          - task: Docker@2
            inputs:
              containerRegistry: 'aspdotnet'
              repository: 'aspdotnet2023'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: $(Build.BuildId)
            
  - stage: Deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: Build
    jobs:
      - deployment: dev
        displayName: Dev-Deploy
        workspace:
          clean: all
        pool:
         vmImage: 'windows-latest'
        environment:
         name: devdeploy
        # variables:
        #   - template: devdeploy.yml
        strategy:
         runOnce:
           deploy:
             steps:
             - task: DownloadBuildArtifacts@1
               inputs:
                 buildType: 'current'
                 downloadType: 'single'
                 artifactName: 'drop'
                 downloadPath: '$(System.ArtifactsDirectory)'
             - task: AzureRmWebAppDeployment@4
               inputs:
                   ConnectionType: 'AzureRM'
                   azureSubscription: 'se-dev'
                   appType: 'webAppContainer'
                   WebAppName: 'aspdotnet2023'
                   DockerNamespace: 'aspdotnet2023.azurecr.io'
                   DockerRepository: 'aspdotnet2023'
                   DockerImageTag: '$(Build.BuildId)'
             
             - task: SqlAzureDacpacDeployment@1
               inputs:
                 azureSubscription: 'Azure subscription 1(1)(62d23974-1452-401f-ae2f-b88e5377196d)'
                 AuthenticationType: 'server'
                 ServerName: 'aspdotnet2023.database.windows.net'
                 DatabaseName: 'aspdotnet2023'
                 SqlUsername: 'satest566'
                 SqlPassword: 'admin@123'
                 deployType: 'SqlTask'
                 SqlFile: '$(System.ArtifactsDirectory)/drop/tododbscript.sql'
                 IpDetectionMethod: 'AutoDetect'
        
        



